Interfaces in Golang
Go language interfaces are different from other languages. In Go language, the interface is a custom type that is used to specify a set of one or
more method signatures and the interface is abstract, so you are not allowed to create an instance of the interface. But you are allowed to create a 
variable of an interface type and this variable can be assigned with a concrete type value that has the methods the interface requires. Or in other words,
the interface is a collection of methods as well as it is a custom type.
type myinterface interface{
// Methods
fun1() int
fun2() float64
}
In the Go language, it is necessary to implement all the methods declared in the interface for implementing an interface. The go language interfaces 
are implemented implicitly. And it does not contain any specific keyword to implement an interface just like other languages.
package main 
  
import "fmt"
  
// Creating an interface 
type tank interface { 
    // Methods 
    Tarea() float64 
    Volume() float64 
} 
type myvalue struct { 
    radius float64 
    height float64 
} 
// Implementing methods of 
// the tank interface 
func (m myvalue) Tarea() float64 { 
  
    return 2*m.radius*m.height + 
        2*3.14*m.radius*m.radius 
} 
func (m myvalue) Volume() float64 { 
  
    return 3.14 * m.radius * m.radius * m.height 
} 
// Main Method 
func main() { 
    // Accessing elements of 
    // the tank interface 
    var t tank 
    t = myvalue{10, 14} 
    fmt.Println("Area of tank :", t.Tarea()) 
    fmt.Println("Volume of tank:", t.Volume()) 
} 

The zero value of the interface is nil.
When an interface contains zero methods, such types of interface is known as the empty interface. So, all the types implement the empty interface.
Use of Interface: You can use interface when in methods or functions you want to pass different types of argument in them just like Println () function. 
Or you can also use interface when multiple types implement same interface.

Embedding Interfaces in Golang
In Go language, the interface is a collection of method signatures and it is also a type means you can create a variable of an interface type. 
As we know that the Go language does not support inheritance, but the Go interface fully supports embedding. In embedding, an interface can embed other 
interfaces or an interface can embed other interfaceâ€™s method signatures in it, the result of both is the same as shown in Example 1 and 2.
You are allowed to embed any number of interfaces in a single interface
type interface_name1 interface {

    Method1()
}

type interface_name2 interface {

    Method2()
}

type finalinterface_name interface {

    interface_name1
    interface_name2
}

or

type interface_name1 interface {

    Method1()
}

type interface_name2 interface {

    Method2()
}

type finalinterface_name interface {

    Method1()
    Method2()
}



Golang | Polymorphism Using Interfaces




















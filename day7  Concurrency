Goroutines â€“ Concurrency in Golang
Go language provides a special feature known as a Goroutines. A Goroutine is a function or method which executes independently and simultaneously 
in connection with any other Goroutines present in your program. Or in other words, every concurrently executing activity in Go
language is known as a Goroutines. You can consider a Goroutine like a light weighted thread. The cost of creating Goroutines is
very small as compared to the thread. Every program contains at least a single Goroutine and that Goroutine is known as the main Goroutine.
All the Goroutines are working under the main Goroutines if the main Goroutine terminated, then all the goroutine present in the program also terminated. 
Goroutine always works in the background.
You can create your own Goroutine simply by using go keyword as a prefixing to the function or method call
package main  
import ( 
    "fmt"
    "time"
) 
func display(str string) { 
    for w := 0; w < 6; w++ { 
        time.Sleep(1 * time.Second) 
        fmt.Println(str) 
    } 
} 
func main() { 
    // Calling Goroutine 
    go display("Welcome") 
    // Calling normal function 
    display("GeeksforGeeks") 
} 


Advantages of Goroutines
Goroutines are cheaper than threads.
Goroutine are stored in the stack and the size of the stack can grow and shrink according to the requirement of the program. But in threads, the size of the stack is fixed.
Goroutines can communicate using the channel and these channels are specially designed to prevent race conditions when accessing shared memory using Goroutines.
Suppose a program has one thread, and that thread has many Goroutines associated with it. If any of Goroutine blocks the thread due to resource requirement then
all the remaining Goroutines will assign to a newly created OS thread. All these details are hidden from the programmers.

Anonymous Goroutine
In Go language, you can also start Goroutine for an anonymous function or in other words, you can create an anonymous Goroutine simply by using go keyword
as a prefix of that function 
Syntax:
// Anonymous function call
go func (parameter_list){
// statement
}(arguments)


package main 
  
import ( 
    "fmt"
    "time"
) 
  
// Main function 
func main() { 
  
    fmt.Println("Welcome!! to Main function") 
  
    // Creating Anonymous Goroutine 
    go func() { 
  
        fmt.Println("Welcome!! to GeeksforGeeks") 
    }() 
  
    time.Sleep(1 * time.Second) 
    fmt.Println("GoodBye!! to Main function") 
} 


Select Statement in Go Language
In Go language, the select statement is just like switch statement, but in the select statement, case statement refers to communication,
i.e. sent or receive operation on the channel.
select{
case SendOrReceive1: // Statement
case SendOrReceive2: // Statement
case SendOrReceive3: // Statement
.......
default: // Statement
Select statement waits until the communication(send or receive operation) is prepared for some cases to begin.

package main 
   
import("fmt"
 "time") 
       
    // function 1 
    func portal1(channel1 chan string) { 
  
        time.Sleep(3*time.Second) 
        channel1 <- "Welcome to channel 1"
    } 
       
    // function 2 
     func portal2(channel2 chan string) { 
  
        time.Sleep(9*time.Second) 
        channel2 <- "Welcome to channel 2"
    } 
   
// main function 
func main(){ 
       
    // Creating channels 
   R1:= make(chan string) 
   R2:= make(chan string) 
      
   // calling function 1 and  
   // function 2 in goroutine 
   go portal1(R1) 
   go portal2(R2) 
  
   select{ 
  
        // case 1 for portal 1 
       case op1:= <- R1: 
       fmt.Println(op1) 
   
       // case 2 for portal 2 
       case op2:= <- R2: 
       fmt.Println(op2) 
   } 
      
} 


If a select statement does not contain any case statement, then that select statement waits forever.
Syntax:
select{}

The default statement in the select statement is used to protect select statement from blocking. This statement executes when there is no case statement is ready to proceed.
In select statement, if multiple cases are ready to proceed, then one of them can be selected randomly

















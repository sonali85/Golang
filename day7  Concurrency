Goroutines â€“ Concurrency in Golang
Go language provides a special feature known as a Goroutines. A Goroutine is a function or method which executes independently and simultaneously 
in connection with any other Goroutines present in your program. Or in other words, every concurrently executing activity in Go
language is known as a Goroutines. You can consider a Goroutine like a light weighted thread. The cost of creating Goroutines is
very small as compared to the thread. Every program contains at least a single Goroutine and that Goroutine is known as the main Goroutine.
All the Goroutines are working under the main Goroutines if the main Goroutine terminated, then all the goroutine present in the program also terminated. 
Goroutine always works in the background.
You can create your own Goroutine simply by using go keyword as a prefixing to the function or method call
package main  
import ( 
    "fmt"
    "time"
) 
func display(str string) { 
    for w := 0; w < 6; w++ { 
        time.Sleep(1 * time.Second) 
        fmt.Println(str) 
    } 
} 
func main() { 
    // Calling Goroutine 
    go display("Welcome") 
    // Calling normal function 
    display("GeeksforGeeks") 
} 


Advantages of Goroutines
Goroutines are cheaper than threads.
Goroutine are stored in the stack and the size of the stack can grow and shrink according to the requirement of the program. But in threads, the size of the stack is fixed.
Goroutines can communicate using the channel and these channels are specially designed to prevent race conditions when accessing shared memory using Goroutines.
Suppose a program has one thread, and that thread has many Goroutines associated with it. If any of Goroutine blocks the thread due to resource requirement then
all the remaining Goroutines will assign to a newly created OS thread. All these details are hidden from the programmers.

Anonymous Goroutine
In Go language, you can also start Goroutine for an anonymous function or in other words, you can create an anonymous Goroutine simply by using go keyword
as a prefix of that function 
Syntax:
// Anonymous function call
go func (parameter_list){
// statement
}(arguments)


package main 
  
import ( 
    "fmt"
    "time"
) 
  
// Main function 
func main() { 
  
    fmt.Println("Welcome!! to Main function") 
  
    // Creating Anonymous Goroutine 
    go func() { 
  
        fmt.Println("Welcome!! to GeeksforGeeks") 
    }() 
  
    time.Sleep(1 * time.Second) 
    fmt.Println("GoodBye!! to Main function") 
} 


Select Statement in Go Language
In Go language, the select statement is just like switch statement, but in the select statement, case statement refers to communication,
i.e. sent or receive operation on the channel.
select{
case SendOrReceive1: // Statement
case SendOrReceive2: // Statement
case SendOrReceive3: // Statement
.......
default: // Statement
Select statement waits until the communication(send or receive operation) is prepared for some cases to begin.

package main 
   
import("fmt"
 "time") 
       
    // function 1 
    func portal1(channel1 chan string) { 
  
        time.Sleep(3*time.Second) 
        channel1 <- "Welcome to channel 1"
    } 
       
    // function 2 
     func portal2(channel2 chan string) { 
  
        time.Sleep(9*time.Second) 
        channel2 <- "Welcome to channel 2"
    } 
   
// main function 
func main(){ 
       
    // Creating channels 
   R1:= make(chan string) 
   R2:= make(chan string) 
      
   // calling function 1 and  
   // function 2 in goroutine 
   go portal1(R1) 
   go portal2(R2) 
  
   select{ 
  
        // case 1 for portal 1 
       case op1:= <- R1: 
       fmt.Println(op1) 
   
       // case 2 for portal 2 
       case op2:= <- R2: 
       fmt.Println(op2) 
   } 
      
} 


If a select statement does not contain any case statement, then that select statement waits forever.
Syntax:
select{}

The default statement in the select statement is used to protect select statement from blocking. This statement executes when there is no case statement is ready to proceed.
In select statement, if multiple cases are ready to proceed, then one of them can be selected randomly.

Golang | Goroutine vs Thread
GOROUTINE                                           	THREAD
Goroutines are managed by the go runtime.	                             Operating system threads are managed by kernal.
Goroutine are not hardware dependent.	                                Threads are hardware dependent.
Goroutines have easy communication medium known as channel. 	       Thread doesnot have easy communication medium.
Due to the presence of channel one goroutine can communicate 
with other goroutine with low latency.	      	                           Due to lack of easy communication medium inter-threads communicate takes place with high latency.
Goroutine doesnot have ID because go doesnot have Thread Local Storage.	    Threads have their own unique ID because they have Thread Local Storage.
Goroutines are cheaper than threads.	                     	                     	The cost of threads are higher than goroutine.
They are cooperatively scheduled.	                     	                     	They are preemptively scheduled.
They have fasted startup time than threads.	                     	                     	They have slow startup time than goroutines.
Goroutine has growable segmented stacks.		                     	                     Threads doesnot have growable segmented stacks.


Channel in Golang
In Go language, a channel is a medium through which a goroutine communicates with another goroutine and this communication is lock-free. 
Or in other words, a channel is a technique which allows to let one goroutine to send data to another goroutine. 
By default channel is bidirectional, means the goroutines can send or receive data through the same channel
In Go language, a channel is created using chan keyword and it can only transfer data of the same type, 
different types of data are not allowed to transport from the same channel.
var Channel_name chan Type
var c chan string 
You can also create a channel using make() function using a shorthand declaration.
c := make(chan string)


In Go language, channel work with two principal operations one is sending and another one is receiving, both the operations collectively known as communication.
And the direction of <- operator indicates whether the data is received or send. In the channel, the send and receive operation block 
until another side is not ready by default. It allows goroutine to synchronize with each other without explicit locks or condition variables
Send operation: The send operation is used to send data from one goroutine to another goroutine with the help of a channel. Values like int, float64, and bool 
can safe and easy to send through a channel because they are copied so there is no risk of accidental concurrent access of the same value. 
Similarly, strings are also safe to transfer because they are immutable. But for sending pointers or reference like a slice, map, etc. 
through a channel are not safe because the value of pointers or reference may change by sending goroutine or by the receiving goroutine at the
same time and the result is unpredicted. So, when you use pointers or references in the channel you must make sure that they can only access by the one goroutine at a time.
Mychannel <- element
Receive operation: The receive operation is used to receive the data sent by the send operator.
element := <-Mychannel
The above statement indicates that the element receives data from the channel(Mychannel). If the result of the received statement is 
not going to use is also a valid statement. You can also write a receive statement as:
<-Mychannel

package main 
import "fmt"
func myfunc(ch chan int) { 
  
    fmt.Println(234 + <-ch) 
} 
func main() { 
    fmt.Println("start Main method") 
    // Creating a channel 
    ch := make(chan int) 
    go myfunc(ch) 
    ch <- 23 
    fmt.Println("End Main method") 
} 
Output:
start Main method
257
End Main method
Closing a Channel
You can also close a channel with the help of close() function. This is an in-built function and sets a flag which indicates that no more value will send to this channel.
close(channel_name)

Important Points
Blocking Send and Receive: In the channel when the data sent to a channel the control is blocked in that send statement until other goroutine reads from that channel.
Similarly, when a channel receives data from the goroutine the read statement block until another goroutine statement.
Zero Value Channel: The zero value of the channel is nil.
For loop in Channel: A for loop can iterate over the sequential values sent on the channel until it closed.
for item := range Chnl { 
     // statements..
}

Length of the Channel: In channel, you can find the length of the channel using len() function. Here, the length indicates the number of value queued in the channel buffer.
Capacity of the Channel: In channel, you can find the capacity of the channel using cap() function. Here, the capacity indicates the size of the buffer.

Unidirectional Channel in Golang
Unidirectional Channel in Golang
As we know that a channel is a medium of communication between concurrently running goroutines so that they can send and receive data to each other. 
By default a channel is bidirectional but you can create a unidirectional channel also. A channel that can only receive data or a channel that can only send 
data is the unidirectional channel. The unidirectional channel can also create with the help of make() function as shown below:
send : make(chan<-bool)
recieve : make(<-chan bool)

Converting Bidirectional Channel into the Unidirectional Channel
In Go language, you are allowed to convert a bidirectional channel into the unidirectional channel, or in other words, you can convert a bidirectional 
channel into a receive-only or send-only channel, but vice versa is not possible. As shown in the below program:

Use of Unidirectional Channel: The unidirectional channel is used to provide the type-safety of the program so, that the program gives less error. 
Or you can also use a unidirectional channel when you want to create a channel that can only send or receive data.






































